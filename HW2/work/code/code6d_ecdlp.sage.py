

# This file was *autogenerated* from the file code6d_ecdlp.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_0 = Integer(0)
from data import p_list, a_list, b_list, P_list, Q_list

values = []
mods = []

for i in range(len(p_list)):
    p = p_list[i]
    # elliptic curve y^2 = x^3 + ax + b
    a = a_list[i]
    b = b_list[i]
    P = P_list[i]
    Q = Q_list[i]

    R = PolynomialRing(GF(p), names=('x',)); (x,) = R._first_ngens(1)
    f = x**_sage_const_3  + a*x + b
    roots = f.roots()
    if(len(roots) == _sage_const_1 ):
        continue
    for root in roots:
        if root[_sage_const_1 ] == _sage_const_2 :
            xs = root[_sage_const_0 ]
    f_ = f.subs(x=x + xs)

    print(f_)
    c = f_.coefficients()[_sage_const_0 ]
    t = c.square_root()

    u = ((P[_sage_const_1 ] + t*(P[_sage_const_0 ] - xs)) / (P[_sage_const_1 ] - t*(P[_sage_const_0 ] - xs)))
    v = ((Q[_sage_const_1 ] + t*(Q[_sage_const_0 ] - xs)) / (Q[_sage_const_1 ] - t*(Q[_sage_const_0 ] - xs)))

    dlog_result = discrete_log(v, u)
    order_result = u.multiplicative_order()

    print(dlog_result)
    print(order_result)

    # Append results to lists
    values.append(dlog_result)
    mods.append(order_result)

solution = crt(values, mods)

# Print the solution
print("Solution:", solution)

